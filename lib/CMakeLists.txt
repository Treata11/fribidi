# fribidi-config.h generation
set(FRIBIDI_CONFIG_H_CONTENT "
/* fribidi-config.h generated by CMake */
#define PACKAGE \"${PROJECT_NAME}\"
#define PACKAGE_NAME \"GNU FriBidi\"
#define FRIBIDI_NAME \"GNU FriBidi\"
#define PACKAGE_BUGREPORT \"https://github.com/fribidi/fribidi/issues/new\"
#define FRIBIDI_VERSION \"${PROJECT_VERSION}\"
#define FRIBIDI_MAJOR_VERSION ${PROJECT_VERSION_MAJOR}
#define FRIBIDI_MINOR_VERSION ${PROJECT_VERSION_MINOR}
#define FRIBIDI_MICRO_VERSION ${PROJECT_VERSION_PATCH}
#define FRIBIDI_INTERFACE_VERSION ${INTERFACE_VERSION}
#define FRIBIDI_INTERFACE_VERSION_STRING \"${INTERFACE_VERSION}\"
#define SIZEOF_INT 4
")
if(MSVC)
    string(APPEND FRIBIDI_CONFIG_H_CONTENT "\n#define FRIBIDI_BUILT_WITH_MSVC")
else()
    string(APPEND FRIBIDI_CONFIG_H_CONTENT "\n#undef FRIBIDI_BUILT_WITH_MSVC")
endif()
file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/fribidi-config.h "${FRIBIDI_CONFIG_H_CONTENT}")

# Headers
set(FRIBIDI_HEADERS
    fribidi-arabic.h
    fribidi-begindecls.h
    fribidi-bidi.h
    fribidi-bidi-types.h
    fribidi-bidi-types-list.h
    fribidi-char-sets.h
    fribidi-char-sets-list.h
    fribidi-common.h
    fribidi-deprecated.h
    fribidi-enddecls.h
    fribidi-flags.h
    fribidi-joining.h
    fribidi-joining-types.h
    fribidi-joining-types-list.h
    fribidi-mirroring.h
    fribidi-brackets.h
    fribidi-shape.h
    fribidi-types.h
    fribidi-unicode.h
    fribidi.h
)
install(FILES ${FRIBIDI_HEADERS} DESTINATION include/fribidi)

# Sources
set(FRIBIDI_SOURCES
    fribidi.c
    fribidi-arabic.c
    fribidi-bidi.c
    fribidi-bidi-types.c
    fribidi-char-sets.c
    fribidi-char-sets-cap-rtl.c
    fribidi-char-sets-cp1255.c
    fribidi-char-sets-cp1256.c
    fribidi-char-sets-iso8859-6.c
    fribidi-char-sets-iso8859-8.c
    fribidi-char-sets-utf8.c
    fribidi-deprecated.c
    fribidi-joining.c
    fribidi-joining-types.c
    fribidi-mirroring.c
    fribidi-brackets.c
    fribidi-run.c
    fribidi-shape.c
)

set(FRIBIDI_PUBLIC_HEADERS
    ${FRIBIDI_HEADERS}
    ${CMAKE_CURRENT_BINARY_DIR}/fribidi-config.h
    ${CMAKE_BINARY_DIR}/config.h
)

## TODO: Add sharedlib?
add_library(fribidi STATIC  # Explicitly static since libfribidi.a
    ${FRIBIDI_SOURCES}
    ${FRIBIDI_PUBLIC_HEADERS}
    ${FRIBIDI_UNICODE_VERSION_H}
    ${GENERATED_TAB_INCLUDE_FILES}
)
target_include_directories(fribidi PUBLIC ${FRIBIDI_INCLUDE_DIRS})
target_compile_definitions(fribidi PRIVATE 
    HAVE_CONFIG_H 
    ${FRIBIDI_BUILD_CARGS} 
    ${FRIBIDI_STATIC_CARGS}
)
set_target_properties(fribidi PROPERTIES 
    VERSION ${LIBVERSION}
    SOVERSION ${SOVERSION}
    VISIBILITY_INLINES_HIDDEN TRUE
    C_VISIBILITY_PRESET hidden
)
if(FRIBIDI_FRAMEWORK)
    set_target_properties(fribidi PROPERTIES
        FRAMEWORK TRUE
        FRAMEWORK_VERSION "${FRIBIDI_FULL_VERSION}"
        PRODUCT_BUNDLE_IDENTIFIER "github.com/fribidi/fribidi"
        XCODE_ATTRIBUTE_INSTALL_PATH "@rpath"
        PUBLIC_HEADER "${FRIBIDI_PUBLIC_HEADERS}"
        OUTPUT_NAME "Fribidi"
        XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY ""
        XCODE_ATTRIBUTE_CODE_SIGNING_ALLOWED "NO"
        XCODE_ATTRIBUTE_CODE_SIGNING_REQUIRED "NO"
        MACOSX_FRAMEWORK_IDENTIFIER "github.com/fribidi/fribidi"
        MACOSX_FRAMEWORK_BUNDLE_VERSION "${FRIBIDI_FULL_VERSION}"
        MACOSX_FRAMEWORK_SHORT_VERSION_STRING "${FRIBIDI_SHORT_VERSION}"
        MACOSX_RPATH TRUE
        # RESOURCE "${FRIBIDI_PUBLIC_HEADERS}"
    )
endif()

add_dependencies(fribidi generate-unicode-version generate-tabs)
install(TARGETS fribidi 
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    # RUNTIME DESTINATION bin
    FRAMEWORK DESTINATION lib 
    # COMPONENT runtime OPTIONAL
    INCLUDES DESTINATION include/fribidi
    PUBLIC_HEADER DESTINATION include/fribidi
)